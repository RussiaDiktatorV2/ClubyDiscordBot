/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.github.russiadiktatorv2.clubybot.core

import com.github.russiadiktatorv2.clubybot.events.GuildMemberJoinEvent
import com.github.russiadiktatorv2.clubybot.events.MessageListener
import com.github.russiadiktatorv2.clubybot.management.commands.CacheManager.loadClubyCache
import com.github.russiadiktatorv2.clubybot.management.commands.CacheManager.prefixMap
import com.github.russiadiktatorv2.clubybot.management.commands.CommandManager
import com.github.russiadiktatorv2.clubybot.management.database.MongoDB
import com.github.russiadiktatorv2.clubybot.settings.ClubySettings
import com.vdurmont.emoji.EmojiParser
import org.javacord.api.DiscordApi
import org.javacord.api.DiscordApiBuilder
import org.javacord.api.entity.activity.ActivityType
import org.javacord.api.entity.intent.Intent
import org.javacord.api.entity.user.UserStatus
import org.litote.kmongo.KMongo
import java.util.concurrent.TimeUnit

object ClubyDiscordBot {

    val mongoClient = KMongo.createClient("mongodb://localhost")

    init {
        loadClubyCache()

        val discordApi = DiscordApiBuilder().setToken(ClubySettings.BOT_TOKEN)
            .setAllIntentsExcept(Intent.GUILD_WEBHOOKS, Intent.GUILD_PRESENCES, Intent.GUILD_INVITES, Intent.GUILD_INTEGRATIONS, Intent.GUILD_EMOJIS, Intent.GUILD_BANS, Intent.DIRECT_MESSAGE_TYPING, Intent.GUILD_MESSAGE_TYPING, Intent.GUILD_MEMBERS)
            .addServerMemberJoinListener(GuildMemberJoinEvent())
            .login().join()
        discordApi.setMessageCacheSize(0, 0)
        discordApi.setReconnectDelay { reconnectDelay -> reconnectDelay * 2 }
        //discordApi.threadPool.daemonScheduler.scheduleAtFixedRate( { autoCache()} , 0, 12, TimeUnit.HOURS)
        discordApi.threadPool.daemonScheduler.scheduleAtFixedRate( {changeActivity(discordApi)}, 0, 2, TimeUnit.MINUTES)
        println("Bot started")
        stopProgram(discordApi)

        CommandManager.loadCommands()
        discordApi.addMessageCreateListener(MessageListener())
    }

    private fun stopProgram(discordApi: DiscordApi) {
        return Thread {

            if (readLine().equals("stop")) {
                discordApi.updateStatus(UserStatus.OFFLINE)
                discordApi.disconnect()

                MongoDB.addDocuments()
                mongoClient.close()
            }
        }.start()
    }

    private fun changeActivity(discordApi: DiscordApi) {
        val statusList = arrayOf("${convertUnicode("\uD83D\uDD75\u200D‚ôÇ")}Ô∏è| with ${discordApi.servers.size} guilds",
            "${convertUnicode("\uD83D\uDD75\u200D‚ôÄ")} | Prefix !(Custom)", "${convertUnicode("\uD83E\uDD16")} | Version 0.15", "üì° | (East-Europe)").random()
        discordApi.updateActivity(ActivityType.WATCHING, statusList)
    }

    fun convertUnicode(unicodeID: String) : String {
        return EmojiParser.parseToUnicode(unicodeID)
    }
}

fun main() {
    ClubyDiscordBot
}